version: "3.8"

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: POSTGRES_USER
      POSTGRES_PASSWORD: POSTGRES_PASSWORD
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  redis:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
      AIRFLOW__CELERY__RESULT_BACKEND: AIRFLOW__CELERY__RESULT_BACKEND
      AIRFLOW__CELERY__BROKER_URL: AIRFLOW__CELERY__BROKER_URL
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: webserver
    restart: always

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
      AIRFLOW__CELERY__RESULT_BACKEND: AIRFLOW__CELERY__RESULT_BACKEND
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: scheduler
    restart: always

  airflow-worker:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
      AIRFLOW__CELERY__RESULT_BACKEND: AIRFLOW__CELERY__RESULT_BACKEND
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery worker
    restart: always

  airflow-triggerer:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
      AIRFLOW__CELERY__RESULT_BACKEND: AIRFLOW__CELERY__RESULT_BACKEND
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: triggerer
    restart: always

  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db init &&
        airflow users create -u airflow -p airflow -f Airflow -l Admin -r Admin -e admin@example.com
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  postgres-db-volume:
